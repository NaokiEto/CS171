uniform float t;
const float pi = 3.1415926535;

varying float u, v;

void main()
{
   // Convert from the [-5,5]x[-5,5] range provided into radians
   // between 0 and 2*theta
   u = (gl_Vertex.x + 5.0) / 10.0 * 2.0 * pi;
   v = (gl_Vertex.y + 5.0) / 10.0 * 2.0 * pi;
   float r = sin(4*u+t)/4+1;
   float R = cos(6*cos(u)-t)/4+3;

   float a = R+r*cos(v);
   vec3 world = vec3(a*cos(u), a*sin(u), r*sin(v));

   //gl_Position = gl_ModelViewProjectionMatrix * vec4(world,1.0);
	
	float x = 4.50 * sqrt(gl_Vertex.x * gl_Vertex.x + gl_Vertex.y * gl_Vertex.y);
	//gl_Position = gl_ModelViewProjectionMatrix * vec4(sin(u),sin(v),sin(u+v),1.0);
	float height = cos(gl_Vertex.x * gl_Vertex.x + gl_Vertex.y * gl_Vertex.y + 5.0*t);
	//gl_Position = gl_ModelViewProjectionMatrix * vec4(gl_Vertex.x, -1.0 + 0.2*sin(x + 5*t),gl_Vertex.y,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * vec4(gl_Vertex.x, 0.1 * height,gl_Vertex.y,1.0);

	float sinTerm = 0.1 * sin(gl_Vertex.x * gl_Vertex.x + gl_Vertex.y * gl_Vertex.y + 5.0 * t);
	float normX = 2.0 * gl_Vertex.x * sinTerm;
	float normY = 2.0 * gl_Vertex.y * sinTerm;

	float normalizedNormX = normX/(normX*normX + normY*normY + 1.0);
	float normalizedNormY = normY/(normX*normX + normY*normY + 1.0);
	gl_TexCoord[0].s = (normalizedNormX + 1.0)/2.0;
	gl_TexCoord[0].t = (normalizedNormY + 1.0)/2.0;
	gl_TexCoord[0].p = (1.0/(normX*normX + normY*normY + 1.0) + 1.0)/2.0;
	

	// modify GL_TexCoord by mapping u,v coords to [0,1]
	//gl_TexCoord[0].s = u/(2 * pi);
	//gl_TexCoord[0].t = v/(2 * pi);
	gl_TexCoord[1].s = u/(2.0 * pi);
	gl_TexCoord[1].t = v/(2.0 * pi);
}
